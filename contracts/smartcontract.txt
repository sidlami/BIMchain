pragma solidity ^0.6.0;

//SPDX-License-Identifier: UNLICENSED
contract BIMstorer {
    
    //state variable in memory on the blockchain for address of contract's owner
    address public owner = msg.sender;

    //the uint256 is the hashed content of the BIM model used as an key
    //the second string is the tokenized content of the BIM model serving --> maybe a different data type for tokens possible
    mapping(uint256 => string) private tokenizedModels;
    
    //table for users who have stored their BIM models and making them accesible via a project title
    //the first uint256 is the hased BIM project title (serves as usernmaer or login credentials) the user sets before initial upload of BIM Model to the Blockchain
    //the second uint256 is the hashed content of the BIM model which can be used on the mapping 'tokenizedModels'
    mapping(uint256 => uint256) private hashedModels;
    
    //get the tokenized BIM model based on the hashed model 
    function getTokenizedModel(uint256 hashedModel) public view returns(string memory){
        return tokenizedModels[hashedModel]; //returns zero if no tokenized model is found based on the hashedModel key
    }
    
    //store the tokenized BIM model and if successful return its unique key
    function setTokenizedModel(uint256 hashedModel, string memory tokenizedModel) public{
        tokenizedModels[hashedModel] = tokenizedModel;
    }
}